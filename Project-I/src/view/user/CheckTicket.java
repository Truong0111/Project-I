/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.user;

import view.manager.ticket.*;
import static config.JDBCConnection.getJDBCConnection;
import constand.MySQLConstand;
import controller.TicketController;
import java.awt.Font;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import model.book.Book;
import model.ticket.BookRequestTicket;
import model.ticket.BorrowTicket;
import model.ticket.ExtendTicket;
import model.ticket.LendTicket;
import model.ticket.PenaltyTicket;
import model.ticket.Ticket;
import model.user.User;
import view.other.NofiDialog;

/**
 *
 * @author Administrator
 */
public class CheckTicket extends javax.swing.JPanel {

    /**
     * Creates new form TicketManagerForm
     */
    private int count;
    private User user;
    List<Ticket> tickets;
    TicketController ticketController = new TicketController();

    public void setCountToZ() {
        this.count = 0;
    }

    public int getCount() {
        return count;
    }

    public CheckTicket(User user) {
        initComponents();
        this.user = user;
        this.tickets = TicketController.getTicketByUserId(user.getAccount().getIdAccount());
        tb_ticket.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 16));
        tb_ticket.getTableHeader().setOpaque(false);
        jPanel9.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ticketmenu = new javax.swing.JPopupMenu();
        checkticket = new javax.swing.JMenuItem();
        jPanel11 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        tf_searchid = new javax.swing.JTextField();
        btn_search = new view.other.MyButton();
        jcb_type = new javax.swing.JComboBox<>();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_ticket = new javax.swing.JTable();
        lb_checknumber = new javax.swing.JLabel();

        checkticket.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        checkticket.setText("Kiểm tra thông tin phiếu");
        checkticket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkticketActionPerformed(evt);
            }
        });
        ticketmenu.add(checkticket);

        setBackground(new java.awt.Color(245, 245, 245));

        jPanel11.setBackground(new java.awt.Color(245, 245, 245));

        jPanel10.setBackground(new java.awt.Color(245, 245, 245));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel8.setText("Tìm theo ID phiếu");

        tf_searchid.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        btn_search.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btn_search.setText("Tìm kiếm");
        btn_search.setDefaultCapable(false);
        btn_search.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchbtn_searchActionPerformed(evt);
            }
        });

        jcb_type.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jcb_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sách đang mượn", "Sách đã mượn", " " }));
        jcb_type.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(tf_searchid, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jcb_type, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)
                        .addComponent(btn_search, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(410, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_searchid, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcb_type, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel9.setBackground(new java.awt.Color(245, 245, 245));

        tb_ticket.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        tb_ticket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID phiếu", "Tên sách", "Loại", "Ngày tạo", "Trạng thái phiếu"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_ticket.setComponentPopupMenu(ticketmenu);
        tb_ticket.setRowHeight(26);
        tb_ticket.setSelectionBackground(new java.awt.Color(232, 57, 95));
        tb_ticket.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tb_ticket);

        lb_checknumber.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(lb_checknumber, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lb_checknumber, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_searchbtn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchbtn_searchActionPerformed
        jPanel9.setVisible(true);

        String searchid = tf_searchid.getText().trim();
        String searchtype = String.valueOf(jcb_type.getSelectedItem());

        ClearDataTable();
        setCountToZ();

        if (searchtype.equals("Sách đang mượn")) {
            for (Ticket ticket : tickets) {
                String idticket = String.valueOf(ticket.getId());

                String type = "";
                String bookname = "";

                if (ticket instanceof LendTicket) {
                    if (((LendTicket) ticket).getStatus().equals("chưa xử lý")) {
                        type += "Phiếu trả";
                        bookname = ((LendTicket) ticket).getBorrowTicket().getBook().getName();
                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
                        String strDate = formatter.format(ticket.getDateCreate());

                        String status = ticket.getStatus();

                        String tbData[] = {idticket, bookname, type, strDate, status};

                        DefaultTableModel tbmodel = (DefaultTableModel) tb_ticket.getModel();
                        tbmodel.addRow(tbData);

                    }

                    count++;
                }

            }

        } else {

            if (searchtype.equals("Sách đã mượn")) {
                for (Ticket ticket : tickets) {
                    String idticket = String.valueOf(ticket.getId());

                    String type = "";
                    String bookname = "";

                    if (ticket instanceof LendTicket) {
                        if (((LendTicket) ticket).getStatus().equals("Đã xử lý")) {
                            type += "Phiếu trả";
                            bookname = ((LendTicket) ticket).getBorrowTicket().getBook().getName();
                            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
                            String strDate = formatter.format(ticket.getDateCreate());

                            String status = ticket.getStatus();

                            String tbData[] = {idticket, bookname, type, strDate, status};

                            DefaultTableModel tbmodel = (DefaultTableModel) tb_ticket.getModel();
                            tbmodel.addRow(tbData);

                        }

                        count++;
                    }

                }

            }
        }

        lb_checknumber.setText("Tìm được " + count + " phiếu!");

//            for (Ticket ticket : tickets){
//                String idticket = String.valueOf(ticket.getId());
//                
//                String type = "";
//                String bookname ="";
//                if (ticket instanceof BorrowTicket){
//                   type+="Phiếu mượn";
//                   bookname = ((BorrowTicket) ticket).getBook().getName();
//                }
//                else if (ticket instanceof LendTicket){
//                   type+="Phiếu trả";
//                   bookname = ((LendTicket) ticket).getBorrowTicket().getBook().getName();
//                }
//                else if (ticket instanceof ExtendTicket){
//                   type+="Phiếu gia hạn";
//                   bookname = ((ExtendTicket) ticket).getBorrowTicket().getBook().getName();
//                }
//                else if (ticket instanceof PenaltyTicket){
//                   type+="Phiếu phạt";
//                   bookname = ((PenaltyTicket) ticket).getBorrowTicket().getBook().getName();
//                }
//                
//                SimpleDateFormat  formatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
//                String strDate = formatter.format(ticket.getDateCreate() );
//                
//                String status = ticket.getStatus();
//
//                String tbData[] = {idticket,bookname, type, strDate, status};
//
//                DefaultTableModel tbmodel = (DefaultTableModel) tb_ticket.getModel();
//                tbmodel.addRow(tbData);
//                count++;
//            }
//               
//            lb_checknumber.setText("Tìm được " + count + " phiếu!");

    }//GEN-LAST:event_btn_searchbtn_searchActionPerformed

    private void checkticketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkticketActionPerformed
        Ticket checkticket = SelectTicket();
        if (checkticket == null) {
            NofiDialog nd = new NofiDialog("Vui lòng chọn phiếu để kiểm tra.");
        } else {
            if (checkticket instanceof BorrowTicket) {
                CheckBorrowTicketFrame ctf = new CheckBorrowTicketFrame(TicketController.getBorrowTicketById(checkticket.getId()));
            } else if (checkticket instanceof LendTicket) {
                CheckLendTicketFrame ctf = new CheckLendTicketFrame(TicketController.getLendTicketById(checkticket.getId()));
            } else if (checkticket instanceof ExtendTicket) {
                CheckExtendTicketFrame ctf = new CheckExtendTicketFrame(TicketController.getExtendTicketByID(checkticket.getId()));
            }
        }
    }//GEN-LAST:event_checkticketActionPerformed

    public void ClearDataTable() {
        DefaultTableModel tbmodel = (DefaultTableModel) tb_ticket.getModel();
        tbmodel.setRowCount(0);
    }

    public Ticket SelectTicket() {
        DefaultTableModel model = (DefaultTableModel) tb_ticket.getModel();
        int selectedRowIndex = tb_ticket.getSelectedRow();

        if (selectedRowIndex == -1) {
            return null;
        } else {
            String id = model.getValueAt(selectedRowIndex, 0).toString();
            String type = model.getValueAt(selectedRowIndex, 2).toString();
            if (type.equals("Phiếu mượn")) {
                BorrowTicket ticket = searchBorrowTicketByID(id);
                return ticket;
            } else if (type.equals("Phiếu gia hạn")) {
                ExtendTicket ticket = searchExtendTicketByID(id);
                return ticket;
            } else if (type.equals("Phiếu trả")) {
                LendTicket ticket = searchLendTicketByID(id);
                return ticket;
            } else if (type.equals("Phiếu phạt")) {
                PenaltyTicket ticket = searchPenaltyTicketByID(id);
                return ticket;
            } else if (type.equals("Phiếu yêu cầu sách")) {
                BookRequestTicket ticket = searchBookRequestTicketByID(id);
                return ticket;
            }
        }
        return null;
    }

    public User searchUserByID(String ID) {
        User user = new User();
        try {
            Class.forName(MySQLConstand.CLASS_NAME);
            Connection conn = getJDBCConnection();
            Statement st = conn.createStatement();

            String sql = "select * from user where idUser='" + ID + "'";

            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                String name = rs.getString("name");
                String yearbd = rs.getString("yearbirthday");
                String phone = rs.getString("phonenumber");
                String idcard = rs.getString("idcard");

                user.setName(name);
                user.setYearBirthday(Integer.parseInt(yearbd));
                user.setPhoneNumber(phone);
                user.setIdCard(idcard);
            }
            conn.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return user;
    }

    public Book searchBookByID(String ID) {
        Book book = new Book();
        try {
            Class.forName(MySQLConstand.CLASS_NAME);
            Connection conn = getJDBCConnection();
            Statement st = conn.createStatement();

            String sql = "select * from book where idBook='" + ID + "'";

            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                String name = rs.getString("name");
                String code = rs.getString("code");
                String author = rs.getString("author");
                String category = rs.getString("category");
                Short year = rs.getShort("year");
                String publisher = rs.getString("publisher");
                String status = rs.getString("status");

                book.setId(Integer.valueOf(ID));
                book.setName(name);
                book.setCode(code);
                book.setAuthor(author);
                book.setCategory(category);
                book.setYear(year);
                book.setPublisher(publisher);
                book.setStatus(status);
            }
            conn.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return book;
    }

    public BorrowTicket searchBorrowTicketByID(String ID) {
        BorrowTicket ticket = new BorrowTicket();

        try {
            Connection conn = getJDBCConnection();
            Statement st = conn.createStatement();

            String sql = "select * from borrowticket where idTicket='" + ID + "'";

            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                int idTicket = rs.getInt("idTicket");
                String idBook = rs.getString("idBook");
                String idUser = rs.getString("idUser");
//                String dateCreate = rs.getInt("dateCreate");
                String dateBorrow = rs.getString("borrowDate");
                String dateReturn = rs.getString("returnDate");
                String status = rs.getString("status");

                ticket.setId(idTicket);
                ticket.setBook(searchBookByID(idBook));
                ticket.setBorrower(searchUserByID(idUser));
//                ticket.setDateCreate(dateCreate);
//                ticket.setBorrowedDate(dateBorrow);
//                ticket.setReturnDate(dateReturn);
//                ticket.setStatus();
            }
            conn.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return ticket;
    }

    public ExtendTicket searchExtendTicketByID(String ID) {
        ExtendTicket ticket = new ExtendTicket();

        try {
            Connection conn = getJDBCConnection();
            Statement st = conn.createStatement();

            String sql = "select * from extendticket where idTicket='" + ID + "'";

            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                int idTicket = rs.getInt("idTicket");
                int idBorrowTicket = rs.getInt("idBorrow");
                String dateCreate = rs.getString("dateCreate");
//                String olddateReturn = rs.getString("returnDate");
                String newDateReturn = rs.getString("newreturnDate");
                String status = rs.getString("status");

                ticket.setId(idTicket);
//                ticket.setBorrowTicket(borrowTicket);
//                ticket.setDateCreate(dateCreate);
//                ticket.setNewReturnDate(newDateReturn);
//                ticket.setStatus();
            }
            conn.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return ticket;
    }

    public LendTicket searchLendTicketByID(String ID) {
        LendTicket ticket = new LendTicket();

        try {
            Connection conn = getJDBCConnection();
            Statement st = conn.createStatement();

            String sql = "select * from lendticket where idTicket='" + ID + "'";

            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                int idTicket = rs.getInt("idTicket");
                int idBorrowTicket = rs.getInt("idBorrow");
                String dateCreate = rs.getString("dateCreate");
                String dateLend = rs.getString("lendDate");
                String status = rs.getString("status");

                ticket.setId(idTicket);
//                ticket.setBorrowTicket(borrowTicket);
//                ticket.setDateCreate(dateCreate);
//                ticket.setLendDate(dateLend);
//                ticket.setStatus();
            }
            conn.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return ticket;
    }

    public PenaltyTicket searchPenaltyTicketByID(String ID) {
        PenaltyTicket ticket = new PenaltyTicket();

        try {
            Connection conn = getJDBCConnection();
            Statement st = conn.createStatement();

            String sql = "select * from penaltyticket where idTicket='" + ID + "'";

            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                int idTicket = rs.getInt("idTicket");
                int idBorrowTicket = rs.getInt("idBorrow");
                String dateCreate = rs.getString("dateCreate");
//                String dateLend = rs.getString("lendDate");
                int penalty = rs.getInt("penalty");
                String status = rs.getString("status");

                ticket.setId(idTicket);
//                ticket.setBorrowTicket(borrowTicket);
//                ticket.setDateCreate(dateCreate);
                ticket.setPenalty(penalty);
//                ticket.setStatus();
            }
            conn.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return ticket;
    }

    public BookRequestTicket searchBookRequestTicketByID(String ID) {
        BookRequestTicket ticket = new BookRequestTicket();

        try {
            Connection conn = getJDBCConnection();
            Statement st = conn.createStatement();

            String sql = "select * from bookrequestticket where idTicket='" + ID + "'";

            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                int idTicket = rs.getInt("idTicket");
                String dateCreate = rs.getString("dateCreate");
                String name = rs.getString("name");
                String author = rs.getString("author");
                String status = rs.getString("status");

                ticket.setId(idTicket);
//                ticket.setDateCreate(dateCreate);
                ticket.setName(name);
                ticket.setAuthor(author);
                ticket.setStatus(status);
            }
            conn.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return ticket;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private view.other.MyButton btn_search;
    private javax.swing.JMenuItem checkticket;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcb_type;
    private javax.swing.JLabel lb_checknumber;
    private javax.swing.JTable tb_ticket;
    private javax.swing.JTextField tf_searchid;
    private javax.swing.JPopupMenu ticketmenu;
    // End of variables declaration//GEN-END:variables
}
